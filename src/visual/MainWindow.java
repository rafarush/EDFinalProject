/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package visual;

import cu.edu.cujae.ceis.tree.Tree;
import cu.edu.cujae.ceis.tree.TreeNode;
import cu.edu.cujae.ceis.tree.binary.BinaryTreeNode;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import logic.Huffman;
import logic.NodeHuffman;
import logic.Convert;
import logic.FileManager;
import logic.TreeHuffman;

/**
 *
 * @author rgarc
 */
public class MainWindow extends javax.swing.JFrame {

    private DefaultTableModel tableModel;
    //private TreeModel treeModel;
    //private DefaultTreeModel treeModel;
    //private DefaultMutableTreeNode jTreeRoot;
    private Huffman huff;
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        this.setResizable(false);
        String columns[] = {"Character","Frequency","Code"};
        tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(columns);
        codeTable.setModel(tableModel);
        
        
            
        //arbol en jtree
        /*jTreeRoot = new DefaultMutableTreeNode(huff.getTree().getRoot());
        jTreeRoot = ;
        treeModel = new DefaultTreeModel(jTreeRoot);
        jTree1 = new JTree(treeModel);
        add(jTree1);*/
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        stringInput = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        headerLabel = new javax.swing.JLabel();
        scrollPaneFrequencies = new javax.swing.JScrollPane();
        codeTable = new javax.swing.JTable();
        scrollPaneTree = new javax.swing.JScrollPane();
        treeRepresentation = new javax.swing.JTextArea();
        headerTable = new javax.swing.JLabel();
        headerTree = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        encodedString = new javax.swing.JTextField();
        loadButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Huffman Coder");

        stringInput.setText("Please, write the string to code...");
        stringInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stringInputActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        headerLabel.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        headerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerLabel.setText("Huffman Coder");

        codeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Character", "Frequency", "Code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        codeTable.setEnabled(false);
        scrollPaneFrequencies.setViewportView(codeTable);

        treeRepresentation.setEditable(false);
        treeRepresentation.setColumns(20);
        treeRepresentation.setRows(5);
        scrollPaneTree.setViewportView(treeRepresentation);

        headerTable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerTable.setText("Code Table");

        headerTree.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerTree.setText("Huffman Tree");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        encodedString.setEditable(false);
        encodedString.setText("Encoded string...");
        encodedString.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encodedStringActionPerformed(evt);
            }
        });

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addGap(334, 334, 334)
                        .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(scrollPaneFrequencies)
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addComponent(stringInput, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(okButton)))
                        .addGap(18, 18, 18)
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(scrollPaneTree, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addComponent(encodedString)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addComponent(headerTable, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(headerTree, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(189, 189, 189))
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(headerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(encodedString, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(okButton)
                        .addComponent(saveButton)
                        .addComponent(loadButton))
                    .addComponent(stringInput, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(headerTable)
                    .addComponent(headerTree))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollPaneTree)
                    .addComponent(scrollPaneFrequencies))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stringInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stringInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stringInputActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        if(tableModel.getRowCount()>0)
            FileManager.saveFile(huff);
        else
            JOptionPane.showMessageDialog(null, "There is nothing to save");
    }//GEN-LAST:event_saveButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // TODO add your handling code here:
        clearTable();
        
        //Saves the input string and calls the logic functions
        updateFrame();
        
    }//GEN-LAST:event_okButtonActionPerformed

    private void encodedStringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encodedStringActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_encodedStringActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        try {
            // TODO add your handling code here:
            Huffman huff = FileManager.loadFile();
            if(huff!=null){
               clearTable();
               updateFrameL(huff); 
            }else{
                JOptionPane.showMessageDialog(null, "Something gone wrong while loading the file");
            }
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MainPanel;
    private javax.swing.JTable codeTable;
    private javax.swing.JTextField encodedString;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JLabel headerTable;
    private javax.swing.JLabel headerTree;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton okButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JScrollPane scrollPaneFrequencies;
    private javax.swing.JScrollPane scrollPaneTree;
    private javax.swing.JTextField stringInput;
    private javax.swing.JTextArea treeRepresentation;
    // End of variables declaration//GEN-END:variables

    private void drawTree(Tree<String> tree){
        //treeRepresentation.setText(String.valueOf(tree));
    }
    
    public String printTree(NodeHuffman root) {
        return printTree(root, "", true);
    }
    
    public String printTree(NodeHuffman node, String indent, boolean last) {
        StringBuilder treeStr = new StringBuilder();
        if (node != null) {
            treeStr.append(indent);
        if (last) {
            treeStr.append("└── ");
            indent += "    ";
        } else {
            treeStr.append("├── ");
            indent += "│   ";
        }
        treeStr.append(node.getFrequency()).append(".").append(node.getInf()).append("\n");
        treeStr.append(printTree((NodeHuffman) node.getLeft(), indent, false));
        treeStr.append(printTree((NodeHuffman) node.getRight(), indent, true));
        }
        return treeStr.toString();
    }

    public void updateFrame(){
        //Saves the input string and calls the logic functions
        String inputText = stringInput.getText();
        if(!inputText.isEmpty()){
            //Initializes the controller class
            huff = new Huffman();
            huff.huffmanCode(inputText);
            
            //Update the table
            LinkedList<NodeHuffman> listForTheTable = huff.getListNodeHuffman();
            Iterator<NodeHuffman> i = listForTheTable.iterator();
            while(i.hasNext()){
                NodeHuffman aux = i.next();
                tableModel.addRow(new Object[]{aux.getInf(),aux.getFrequency(),aux.getCode()});
            }
            //Displays the encoded phrase
            encodedString.setText(huff.getCode());
            
            //Displays the tree representation in the JFrame
            String treeRepresentationS = printTree((NodeHuffman)huff.getTree().getRoot());
            //String treeRepresentationS = generarArbolConectores((NodeHuffman)huff.getTree().getRoot());
            treeRepresentation.setText(treeRepresentationS);
        }else{
            JOptionPane.showMessageDialog(null, "The text input is blank, please, write something");
        }
    }
    
    public void updateFrameL(Huffman huff){
        //Update the table
        LinkedList<NodeHuffman> listForTheTable = huff.getListNodeHuffman();
        Iterator<NodeHuffman> i = listForTheTable.iterator();
        while(i.hasNext()){
            NodeHuffman aux = i.next();
            tableModel.addRow(new Object[]{aux.getInf(),aux.getFrequency(),aux.getCode()});
        }
        //Displays the phrase
        stringInput.setText(huff.getPhrase());
        //Displays the encoded phrase
        encodedString.setText(huff.getCode());
            
        //Displays the tree representation in the JFrame
        String treeRepresentationS = printTree( (NodeHuffman) huff.getTree().getRoot());
        treeRepresentation.setText(treeRepresentationS);
    }
    
    public void clearTable(){
        // Removes all rows in the table
        int numberOfRows = tableModel.getRowCount();
        for (int i = numberOfRows-1; i >= 0; i--) {
            tableModel.removeRow(i);
        }
    }
    
    public static String generarArbolConectores(NodeHuffman root) {
        ArrayList<ArrayList<String>> lineas = new ArrayList<>();
        ArrayList<NodeHuffman> nivel = new ArrayList<>();
        ArrayList<NodeHuffman> siguiente = new ArrayList<>();

        nivel.add(root);
        int nn = 1;
        int ancho = 1;

        while (nn != 0) {
            ArrayList<String> linea = new ArrayList<>();
            nn = 0;
            for (NodeHuffman nodo : nivel) {
                if (nodo == null) {
                    linea.add("");
                    siguiente.add(null);
                    siguiente.add(null);
                } else {
                    String valor = String.valueOf(nodo.getFrequency())+"."+String.valueOf(nodo.getInf());
                    linea.add(valor);
                    siguiente.add((NodeHuffman)nodo.getLeft());
                    siguiente.add((NodeHuffman)nodo.getRight());
                    if ((NodeHuffman)nodo.getLeft() != null) nn++;
                    if ((NodeHuffman)nodo.getRight() != null) nn++;
                }
            }
        
            lineas.add(linea);
            ancho = Math.max(ancho, linea.size());
            nivel = siguiente;
            siguiente = new ArrayList<>();
        }
    
        // Construcción de líneas con conectores
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < lineas.size(); i++) {
            ArrayList<String> linea = lineas.get(i);
            int espacio = (int) Math.pow(2, (lineas.size() - i - 1)) - 1;
            if (i > 0) {
            StringBuilder conectores = new StringBuilder();
            conectores.append(" ".repeat(espacio)); // Espacio inicial

            for (int j = 0; j < linea.size(); j++) {
                if (j % 2 == 0) { // Nodos izquierdos
                    conectores.append(" ".repeat(espacio));
                    conectores.append("/");
                    conectores.append(" ".repeat(espacio * 2+1)); // Espacio extra
                } else { // Nodos derechos
                    conectores.append(" ".repeat(espacio ));
                    conectores.append("\\");
                    conectores.append(" ".repeat(espacio * 2+1));
                }

            }
            sb.append(conectores.toString().trim()).append("\n");
            }
            // Línea de valores de los nodos
            StringBuilder valores = new StringBuilder();
            valores.append(" ".repeat(espacio)); // Espacio inicial
            for (String valor : linea) {
                valores.append(valor.isEmpty() ? " " : valor);
                valores.append(" ".repeat(2 * espacio + 1)); // Espacio entre nodos
            }
            sb.append(valores.toString().trim()).append("\n");
        }

        return sb.toString();
    }
}
